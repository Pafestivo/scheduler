// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


//user 
enum UserType {
  admin
  vendor
  booker
  agent
}

model User {
  id                Int        @id @default(autoincrement())
  name              String?     
  type              UserType   @default(booker)
  email             String?    @unique
  phone             String?
  asWhatsapp        Boolean?   @default(false)
  acceptPromotions  Boolean    @default(false)
  timestamp         DateTime   @default(now())
  pfp               String?
  hash              String     @unique   
  hashedPassword    String?
  hashedResetToken  String?
  calendars         Json?
  provider          String?
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
}

//calendar
enum CalendarType {
  paid
  free
  trial
}

model Calendar {
  id               Int            @id @default(autoincrement())
  userHash         Json         // assuming this corresponds to userHash
  licenseHash      String?        // assuming this corresponds to licenseHash
  appointmentsHash Json?          // assuming this corresponds to appointmentHash array
  integrationId    Json?          // assuming this corresponds to integrationId
  isActive         Boolean        @default(true)
  type             CalendarType   @default(free)
  name             String
  timestamp        DateTime       @default(now())
  padding          Int?
  availabilities   Json?          // assuming this corresponds to availabilityHash array
  hash             String         @unique  
  deleted          Boolean        @default(false)
  personalForm     Json?          // holds the questions for the personal form
  appointmentsLength Int          @default(60) // in minutes
  image            String?
  description      String?
  password         String?
  breakTime        String?
  minNotice        Int?           // in hours
}

//

enum IntegrationType {
  google
  outlook
  zapier
  zoom
}

model Integration {
  id     Int              @id @unique @default(autoincrement())
  token  String           @db.VarChar(256) // adjust size based on your needs
  refreshToken String     @db.VarChar(256) // adjust size based on your needs
  expiresAt   Int
  userEmail   String      
  provider   IntegrationType
}

model CalendarIntegration {
  id          Int              @id @unique @default(autoincrement())
  userEmail   String
  calendarName String?    
  calendarHash String  
  provider   IntegrationType
}

//transaction

model Transaction {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  user        Int      // assuming this corresponds to userID
  calendar    Int      // assuming this corresponds to calendarID
  license     Int      // assuming this corresponds to licenseID
  appointment Int      // assuming this corresponds to appointmentID
  hash        String   @unique  
}

//license

enum LicenseType {
  // fill in your license types here
  FREE
  TRIAL
  PAID
  // etc.
}

model License {
  id         Int      @id @default(autoincrement())
  type       LicenseType
  name       String
  price      Float
  timestamp  DateTime @default(now())
  editedBy   Int      // assuming this corresponds to userID
  coupon     Json    // assuming this corresponds to an array of couponID
  fixedPrice Boolean
  hash              String     @unique  
}

//availability

model Availability {
  id               Int      @id @default(autoincrement())
  calendarHash     String   // assuming this corresponds to calendarHash
  day              Int
  startTime        String   // assuming you're using a 24-hour format
  endTime          String   // assuming you're using a 24-hour format
  timestamp        DateTime @default(now())
  hash             String   @unique  
}

//coupon

model Coupon {
  id            Int      @id @default(autoincrement())
  type          String   // enum, create an enum as per your values
  name          String
  CCode         String
  is_onetime    Boolean
  editedby      Int      // assuming this corresponds to userID
  coupon        Json     // assuming this corresponds to licenseID Array
  discountPrice Decimal  // assuming this is a floating point number
  hash          String   @unique  
  // Relations
  // editedByUser User   @relation(fields: [editedby], references: [id])
}

//appointment

enum AppointmentStatus {
  new
  confirmed
  completed
  canceled
  rescheduled
}

model Appointment {
  id           Int               @id @default(autoincrement())
  calendarHash String            // assuming this corresponds to calendarHash
  userHash     String?           // assuming this corresponds to userHash
  timestamp    DateTime?         @default(now())
  status       AppointmentStatus
  date         String          // the date of the meeting in format mm/dd/yy
  time         String           // the time of meeting in format '17:53'
  transaction  Int?               // assuming this corresponds to transactionID
  cancelTime   String?         // assuming timestamp and it is optional
  isConfirmed  Boolean           @default(false)
  answersArray Json?          // the answers to the personalForm questions
  hash         String           @unique  
  // Relations
  // calendarInfo Calendar @relation(fields: [calendar], references: [id])
  // userInfo     User     @relation(fields: [user], references: [id])
  // transactionInfo Transaction @relation(fields: [transaction], references: [id])

}

//review

model Review {
  id        Int       @id @default(autoincrement())
  calendar  Int       // assuming this corresponds to calendarId
  reviewer  Int       // assuming this corresponds to userId
  text      String
  rating    Decimal   // assuming this is a floating point number
  hash              String     @unique  
  // Relations
  // calendarInfo Calendar @relation(fields: [calendar], references: [id])
  // reviewerInfo User     @relation(fields: [reviewer], references: [id])
}